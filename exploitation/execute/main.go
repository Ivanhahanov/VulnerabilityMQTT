package main

import (
	"bufio"
	"crypto/tls"
	"flag"
	"fmt"
	"io"
	"log"
	"strings"
	// "log"
	"os"
	"strconv"
	"time"

	MQTT "github.com/eclipse/paho.mqtt.golang"
)

func readFile(filename string) [][]string {
	var data [][]string
	f, err := os.Open(filename)

	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	scanner := bufio.NewScanner(f)

	for scanner.Scan() {
		data = append(data, strings.Split(scanner.Text(), ",")[1:])
	}

	if err := scanner.Err(); err != nil {
		log.Fatal(err)
	}
	return data
}

func GetTopOfTopic(data [][]string) []string {
	keys := make(map[string]bool)
	var list []string
	//var topics map[string][]string
	for _, entry := range data {
		if _, value := keys[entry[0]]; !value {
			keys[entry[0]] = true
			list = append(list, entry[0])
		}
	}
	return list
}

func main() {
	stdin := bufio.NewReader(os.Stdin)

	hostname, _ := os.Hostname()

	server := flag.String("server", "tcp://127.0.0.1:1883", "The full url of the MQTT server to connect to ex: tcp://127.0.0.1:1883")
	topic := flag.String("topic", "light/1/", "Topic to publish to")
	qos := flag.Int("qos", 0, "The QoS to subscribe to messages at")
	clientid := flag.String("clientid", hostname+strconv.Itoa(time.Now().Second()), "A clientid for the connection")
	username := flag.String("username", "mosquitto", "A username to authenticate to the MQTT server")
	password := flag.String("password", "mosquitto", "Password to match username")
	flag.Parse()

	connOpts := MQTT.NewClientOptions().AddBroker(*server).SetClientID(*clientid).SetCleanSession(true)
	if *username != "" {
		connOpts.SetUsername(*username)
		if *password != "" {
			connOpts.SetPassword(*password)
		}
	}
	tlsConfig := &tls.Config{InsecureSkipVerify: true, ClientAuth: tls.NoClientCert}
	connOpts.SetTLSConfig(tlsConfig)

	client := MQTT.NewClient(connOpts)
	if token := client.Connect(); token.Wait() && token.Error() != nil {
		fmt.Println(token.Error())
		return
	}
	fmt.Printf("Connected to %s\n", *server)
	fmt.Println("Top of topics:")
	topics := GetTopOfTopic(readFile("exploitation/sniff/commands.csv"))
	for i, topic := range topics {
		fmt.Printf("%d. %s\n", i, topic)
	}

	var topicNumber int

	for {
		fmt.Print("Choose topic: ")
		message, err := stdin.ReadString('\n')
		topicNumber, err = strconv.Atoi(strings.TrimSuffix(message, "\n"))

		if err == nil && topicNumber >= 0 && topicNumber < len(topics) {
			break
		}
		fmt.Print("Incorrect topic number\n")
	}

	*topic = topics[topicNumber]
	fmt.Print("------------------\n")
	fmt.Printf("[Topic] <- Command\n")
	fmt.Print("------------------\n")
	for {
		fmt.Printf("[%s] <- ", *topic)
		message, err := stdin.ReadString('\n')
		if err == io.EOF {
			os.Exit(0)
		}
		message = strings.TrimSuffix(message, "\n")
		client.Publish(*topic, byte(*qos), false, message)
	}
}
