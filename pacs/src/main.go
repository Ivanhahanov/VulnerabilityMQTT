package main

import (
	"encoding/json"
	"fmt"
	mqtt "github.com/eclipse/paho.mqtt.golang"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"time"
)

type RFID struct {
	Rfid string `json:"rfid"`
}

var users = map[string]string{"1": "1", "2": "2", "3": "3"}

func MQTTOpenDoor() {
	opts := mqtt.NewClientOptions().AddBroker("tcp://192.168.0.218:1883").SetClientID("pacs")
	opts.SetKeepAlive(2 * time.Second)
	opts.SetPingTimeout(1 * time.Second)
	opts.Username = os.Getenv("MQTT_LOGIN")
	opts.Password = os.Getenv("MQTT_PASS")
	//
	//opts.Username = "mosquitto"
	//opts.Password = "mosquitto"

	c := mqtt.NewClient(opts)
	if token := c.Connect(); token.Wait() && token.Error() != nil {
		panic(token.Error())
	}
	c.Publish("door/1/", 0, false, "open")
	time.Sleep(5 * time.Second)
	c.Publish("door/1/", 0, false, "close")
	c.Disconnect(250)
}

func verify(w http.ResponseWriter, req *http.Request) {
	body, err := ioutil.ReadAll(req.Body)
	if err != nil {
		panic(err)
	}
	log.Println(string(body))
	var rfid RFID
	err = json.Unmarshal(body, &rfid)
	if err != nil {
		panic(err)
	}
	log.Println(rfid.Rfid)
	for _, id := range users {
		if id == rfid.Rfid {
			go MQTTOpenDoor()
			fmt.Fprintf(w, "ok\n")
			return
		}
	}
	fmt.Fprintf(w, "error\n")
}

func main() {
	http.HandleFunc("/check", verify)
	log.Fatal(http.ListenAndServe(":8080", nil))
}
